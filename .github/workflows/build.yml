name: Release to Production

on:
  push:
    branches: [ main ]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:

  next-version:
    name: Next Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.dependencies.outputs.version }}
    steps:

      - name: "Check out code into the Go module directory"
        uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: "Get dependencies"
        id: dependencies
        run: |
            npm ci
            npx semantic-release --dry-run
            cat VERSION.env
            source VERSION.env
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

  darwin-amd64:
    name: darwin-amd64
    if: ${{ needs.next-version.outputs.version != ''}}
    needs: ["next-version"]
    runs-on: ubuntu-latest
    env:
          GOARCH: amd64
          GOOS: darwin
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      -
        name: create
        run: go build -ldflags="-X 'github.com/karl-cardenas-coding/disaster-cli/cmd.VersionString=${{needs.next-version.outputs.version}}'" -o=disaster -v && zip disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip disaster
      - uses: actions/upload-artifact@v1
        with:
          name: disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip
          path: disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip

  darwin-arm64:
      name: darwin-arm64
      if: ${{ needs.next-version.outputs.version != ''}}
      needs: ["next-version"]
      runs-on: ubuntu-latest
      env:
            GOARCH: arm64
            GOOS: darwin
      steps:
        - name: Set up Go
          uses: actions/setup-go@v4
          with:
            go-version: '1.20'
            check-latest: true
          id: go

        - name: Check out code into the Go module directory
          uses: actions/checkout@v3

        - name: create
          run: go build -ldflags="-X 'github.com/karl-cardenas-coding/disaster-cli/cmd.VersionString=${{needs.next-version.outputs.version}}'" -o=disaster -v && zip disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip disaster
        - uses: actions/upload-artifact@v1
          with:
            name: disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip
            path: disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip

  linux-386:
    name: linux-386
    if: ${{ needs.next-version.outputs.version != ''}}
    needs: ["next-version"]
    runs-on: ubuntu-latest
    env:
      GOARCH: "386"
      GOOS: linux
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      -
        name: create
        run: go build -ldflags="-X 'github.com/karl-cardenas-coding/disaster-cli/cmd.VersionString=${{needs.next-version.outputs.version}}'" -o=disaster -v && zip disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip disaster
      - uses: actions/upload-artifact@v1
        with:
          name: disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip
          path: disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip

  linux-amd64:
    name: linux-amd64
    if: ${{ needs.next-version.outputs.version != ''}}
    needs: ["next-version"]
    runs-on: ubuntu-latest
    env:
      GOARCH: amd64
      GOOS: linux
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      -
        name: create
        run: go build -ldflags="-X 'github.com/karl-cardenas-coding/disaster-cli/cmd.VersionString=v${{needs.next-version.outputs.version}}'" -o=disaster -v && zip disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip disaster
      - uses: actions/upload-artifact@v1
        with:
          name: disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip
          path: disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip


  windows-amd64:
    name: windows-amd64
    if: ${{ needs.next-version.outputs.version != ''}}
    needs: ["next-version"]
    runs-on: ubuntu-latest
    env:
      GOARCH: amd64
      GOOS: windows
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        
      -
        name: create
        run: go build -ldflags="-X 'github.com/karl-cardenas-coding/disaster-cli/cmd.VersionString=${{needs.next-version.outputs.version}}'" -o=disaster.exe -v && zip disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip disaster.exe
      - uses: actions/upload-artifact@v1
        with:
          name: disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip
          path: disaster-v${{needs.next-version.outputs.version}}-${{env.GOOS}}-${{env.GOARCH}}.zip

  release:
    name: "Create a release"
    needs: ["next-version","darwin-amd64", "linux-386", "linux-amd64", "windows-amd64", "darwin-arm64"]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v1
        with:
          name: disaster-v${{ steps.get-version.outputs.version }}-darwin-arm64.zip
          path: ./

      - uses: actions/download-artifact@v1
        with:
            name: disaster-v${{ steps.get-version.outputs.version }}-darwin-amd64.zip
            path: ./

      - uses: actions/download-artifact@v1
        with:
            name: disaster-v${{ steps.get-version.outputs.version }}-linux-386.zip
            path: ./


      - uses: actions/download-artifact@v1
        with:
            name: disaster-v${{ steps.get-version.outputs.version }}-linux-amd64.zip
            path: ./

            
      - uses: actions/download-artifact@v1
        with:
            name: disaster-v${{ steps.get-version.outputs.version }}-windows-amd64.zip
            path: ./

      - name: "release"
        run: |
             npm ci
             npx semantic-release
